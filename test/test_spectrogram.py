from unittest import TestCase
import numpy as np

import pathlib
import sys

ROOT = pathlib.Path(__file__).parent
sys.path.append(str(ROOT / "../spectrogram"))

from spectrogram.dsp import generate_features


class TestSpectrogram(TestCase):
    def test_generate_features(self):
        # Test input is an 11 Hz sine wave sampled at 100 Hz, 2s in length
        # fmt: off
        raw_data = np.array([0.2470, -0.4304, -0.9923, -1.0102, -0.5687, 0.1191, 0.7667, 1.0614, 0.7940, 0.0991, -0.4816, -0.9524, -0.9578, -0.6449, 0.2309, 0.7219, 1.0711, 0.8023, 0.0542, -0.4745, -1.0562, -0.8612, -0.2869, 0.1635, 0.7713, 0.9633, 0.6966, 0.1055, -0.6854, -0.9501, -0.7795, -0.4141, 0.2724, 0.8313, 0.9308, 0.6764, -0.0987, -0.5782, -0.9305, -0.8633, -0.3703, 0.4105, 0.8242, 0.9785, 0.4415, -0.0183, -0.6195, -1.0339, -0.8468, -0.2340, 0.3867, 0.9366, 0.9824, 0.6682, -0.1983, -0.8198, -0.9776, -0.7510, -0.1863, 0.5749, 0.8727, 0.9547, 0.4211, -0.2702, -0.7578, -0.9896, -0.6869, -0.0612, 0.6043, 0.9324, 0.9054, 0.3475, -0.1959, -0.8891, -1.0128, -0.6421, -0.0245, 0.5605, 1.0065, 0.8225, 0.3661, -0.3759, -0.8418, -1.0468, -0.6020, 0.0375, 0.7299, 1.0559, 0.8837, 0.2379, -0.3551, -0.9804, -0.9239, -0.4617, -0.0571, 0.6450, 0.9617, 0.7370, 0.4257, -0.3916, -0.8378, -1.0119, -0.4930, 0.2098, 0.7428, 0.9908, 0.7492, 0.2576, -0.5474, -0.9514, -0.9384, -0.5748, 0.1881, 0.7462, 0.8847, 0.8915, 0.3235, -0.4997, -0.9000, -0.7715, -0.3475, 0.1775, 0.8012, 0.9421, 0.7048, 0.0897, -0.6061, -0.9405, -0.8668, -0.4114, 0.2920, 0.8920, 1.0544, 0.6019, 0.0306, -0.5786, -0.9819, -0.8275, -0.4641, 0.3465, 0.8204, 0.9212, 0.6782, -0.1161, -0.7370, -1.0199, -0.7616, -0.1773, 0.3927, 0.9146, 0.9817, 0.4189, 0.0252, -0.7683, -1.0024, -0.7143, -0.2131, 0.5674, 0.9643, 0.9882, 0.4813, -0.2866, -0.9017, -1.0339, -0.7639, -0.1421, 0.6644, 0.9378, 0.8162, 0.4840, -0.2752, -0.8332, -1.0306, -0.6984, -0.1740, 0.5063, 1.0416, 0.8551, 0.4422, -0.2983, -0.8524, -1.0125, -0.6084, -0.1480, 0.5300, 0.9781, 0.8452, 0.4319, -0.4447, -0.8232, -0.9779, -0.5672, 0.0490, 0.6888, 0.9783, 0.7655, 0.3662, -0.4595, -0.9232, -0.9419])
        # fmt: on

        # ---Here is an example.  It's helpful to open up parameters.json for this block while debugging or experimenting
        # Always set to max, can look in parameters.json for 'latestImplementationVersion' for this value
        implementation_version = 4
        # Set to false, the graphs are for Studio
        draw_graphs = False
        # The actual axes names don't matter, just needs to be the correct dimension
        axes = ["x"]
        # Sampling frequency in Hz
        sampling_freq = 100
        # Frame length in seconds
        frame_length = 0.5
        # Frame stride in seconds
        frame_stride = 0.25
        # FFT length in samples
        fft_length = 64
        # The next param is deprecated and ignored
        show_axes = False
        # Noise floor in dB
        noise_floor_db = -100

        # Call the function
        output = generate_features(
            implementation_version,
            draw_graphs,
            raw_data,
            axes,
            sampling_freq,
            frame_length,
            frame_stride,
            fft_length,
            show_axes,
            noise_floor_db,
        )

        # Return signature:
        # return {
        #     'features': features.tolist(),
        #     'graphs': graphs,
        #     'fft_used': [ fft_length ],
        #     'output_config': {
        #         'type': 'spectrogram',
        #         'shape': {
        #             'width': width,
        #             'height': height
        #         }
        #     }
        # }

        # fmt: off
        expected = [0.8195, 0.7850, 0.5811, 0.7853, 0.8354, 0.8515, 0.7983, 0.9777, 0.9165, 0.8571, 0.7664, 0.6709, 0.7731, 0.7659, 0.7097, 0.6908, 0.7016, 0.7639, 0.7129, 0.5968, 0.6873, 0.7006, 0.6397, 0.6777, 0.7492, 0.6527, 0.6825, 0.7065, 0.6699, 0.6136, 0.6198, 0.7193, 0.4839, 0.6780, 0.6322, 0.7368, 0.7727, 0.8103, 0.8045, 0.7375, 0.9778, 0.9237, 0.8647, 0.8136, 0.6613, 0.7581, 0.7919, 0.7856, 0.7430, 0.6846, 0.7778, 0.7436, 0.7450, 0.6468, 0.6677, 0.7298, 0.7332, 0.7494, 0.6736, 0.6998, 0.7409, 0.7344, 0.4676, 0.6534, 0.6759, 0.7638, 0.8044, 0.7824, 0.6644, 0.7783, 0.8355, 0.8488, 0.8044, 0.9782, 0.9170, 0.8574, 0.7677, 0.6678, 0.7431, 0.7740, 0.7315, 0.6559, 0.7158, 0.7139, 0.7017, 0.5952, 0.6497, 0.5169, 0.6258, 0.7423, 0.7071, 0.7234, 0.7226, 0.6883, 0.7006, 0.6238, 0.6974, 0.7119, 0.7230, 0.8028, 0.7622, 0.7143, 0.7863, 0.7969, 0.8432, 0.8097, 0.9779, 0.9147, 0.8645, 0.8004, 0.6934, 0.7342, 0.7801, 0.7360, 0.7471, 0.6276, 0.7499, 0.7471, 0.6926, 0.7103, 0.6706, 0.6509, 0.7475, 0.7017, 0.6659, 0.6599, 0.7369, 0.6544, 0.7136, 0.5444, 0.7089, 0.7517, 0.7059, 0.7377, 0.7371, 0.7651, 0.8041, 0.8328, 0.7641, 0.9777, 0.9199, 0.8692, 0.8105, 0.6651, 0.7809, 0.7708, 0.7691, 0.7490, 0.7249, 0.7014, 0.7588, 0.7547, 0.6342, 0.7113, 0.7279, 0.7338, 0.6907, 0.5643, 0.7388, 0.7379, 0.7126, 0.6640, 0.6026, 0.7076, 0.7251, 0.8158, 0.7901, 0.6783, 0.7729, 0.8418, 0.8571, 0.7927, 0.9780, 0.9202, 0.8503, 0.7343, 0.6806, 0.7719, 0.7489, 0.7017, 0.5085, 0.6762, 0.7051, 0.7086, 0.7010, 0.6236, 0.6669, 0.7057, 0.6899, 0.7028, 0.6533, 0.7391, 0.6289, 0.6906, 0.6240, 0.6509, 0.6542, 0.6031, 0.7381, 0.6577, 0.7311, 0.7704, 0.8040, 0.8146, 0.7908, 0.9798, 0.9189, 0.8765, 0.8038, 0.5722, 0.7309, 0.7969, 0.7829, 0.6880, 0.5730, 0.7496, 0.7476, 0.7322, 0.6958, 0.7110, 0.6818, 0.7145, 0.7455, 0.6496, 0.6827, 0.7271, 0.7744, 0.7276, 0.6951, 0.7265, 0.7406]
        self.assertTrue(np.allclose(output['features'], expected, atol=0.001))
        # fmt: on
